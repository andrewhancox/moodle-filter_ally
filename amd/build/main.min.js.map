{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Main library.\n *\n * @package\n * @author    Guy Thomas\n * @copyright Copyright (c) 2016 Open LMS / 2023 Anthology Group\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint-disable camelcase */\n/* eslint-disable no-undef */\n\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport {get_strings as getStrings} from 'core/str';\nimport Ally from 'filter_ally/ally';\nimport ImageCover from 'filter_ally/imagecover';\nimport Util from 'filter_ally/util';\n\nclass Main {\n    #canViewFeedback = false;\n    #canDownload = false;\n    #courseId;\n    #initialised = false;\n    #params = {};\n\n    /**\n     * Get nodes by xpath.\n     * @param {string} xpath\n     * @returns {Array}\n     */\n    #getNodesByXpath(xpath) {\n        const expression = window.document.createExpression(xpath);\n        const result = expression.evaluate(window.document, XPathResult.ANY_TYPE);\n        const nodes = [];\n        let node;\n        do {\n            node = result.iterateNext();\n            nodes.push(node);\n        } while (node);\n        return nodes;\n    }\n\n    /**\n     * Get single node by xpath.\n     * @param {string} xpath\n     * @returns {Node}\n     */\n    #getNodeByXpath(xpath) {\n        const expression = window.document.createExpression(xpath);\n        const result = expression.evaluate(window.document, XPathResult.FIRST_ORDERED_NODE_TYPE);\n        return result.singleNodeValue;\n    }\n\n    /**\n     * Render template and insert result in appropriate place.\n     * @param {object} data\n     * @param {string} pathHash\n     * @param {node} targetEl\n     * @returns {promise}\n     */\n    #renderTemplate(data, pathHash, targetEl) {\n        const dfd = $.Deferred();\n\n        if ($(targetEl).parents('.filter-ally-wrapper').length) {\n            // This has already been processed.\n            dfd.resolve();\n            return dfd.promise();\n        }\n\n        // Too expensive to do at module level - this is a course level capability.\n        data.canviewfeedback = this.#canViewFeedback;\n        data.candownload = this.#canDownload;\n        data.html = '<span id=\"content-target-' + pathHash + '\"></span>';\n\n        Templates.render('filter_ally/wrapper', data)\n            .done((result) => {\n                const presentWrappers = $(targetEl).next().find('span[data-file-id=\"' + pathHash + '\"]');\n                if (presentWrappers.length == 0) {\n                    $(targetEl).after(result);\n\n                    // We are inserting the module element next to the target as opposed to replacing the\n                    // target as we want to ensure any listeners attributed to the module element persist.\n                    $('#content-target-' + pathHash).after(targetEl);\n                    $('#content-target-' + pathHash).remove();\n                }\n                dfd.resolve();\n            });\n\n        return dfd.promise();\n    }\n\n    /**\n     * Place holder items that are matched by selector.\n     * @param {string} selector\n     * @param {string} map\n     * @returns {promise}\n     */\n    #placeHoldSelector(selector, map) {\n        const dfd = $.Deferred();\n        const length = $(selector).length;\n        let c = 0;\n\n        if (!length) {\n            dfd.resolve();\n        }\n        $(selector).each((idx, el) => {\n\n            /**\n             * Check that all selectors have been processed.\n             */\n            const checkComplete = () => {\n                if (c === length) {\n                    dfd.resolve();\n                }\n            };\n\n            let url,\n                type;\n\n            if ($(el).prop(\"tagName\").toLowerCase() === 'a') {\n                url = $(el).attr('href');\n                type = 'a';\n            } else {\n                url = $(el).attr('src');\n                type = 'img';\n            }\n            let regex;\n            if (url.indexOf('?') > -1) {\n                regex = /pluginfile.php\\/(\\d*)\\/(.*)(\\?)/;\n            } else {\n                regex = /pluginfile.php\\/(\\d*)\\/(.*)/;\n            }\n            const match = url.match(regex);\n            let pathHash;\n            if (match) {\n                let path = match[1] + '/' + match[2];\n                path = decodeURIComponent(path);\n                pathHash = map[path];\n            }\n\n            if (pathHash === undefined) {\n                // Maybe 'slasharguments' setting is disabled for this host.\n                // Let's see if the file URI is found in the URL query.\n                const query = Util.getQuery(url);\n                if (query.file) {\n                    const filePath = decodeURIComponent(query.file);\n                    regex = /\\/(\\d*)\\/(.*)/;\n\n                    const match = filePath.match(regex);\n                    if (match) {\n                        let path = match[1] + '/' + match[2];\n                        path = decodeURIComponent(path);\n                        pathHash = map[path];\n                    }\n                }\n            }\n\n            // Pathhash was definitely not found :( .\n            if (pathHash === undefined) {\n                c++;\n                checkComplete();\n                return;\n            }\n\n            const data = {\n                isimage: type === 'img',\n                fileid: pathHash,\n                url: url\n            };\n\n            this.#renderTemplate(data, pathHash, $(el))\n                .done(() => {\n                    c++;\n                    checkComplete();\n                });\n        });\n        return dfd.promise();\n    }\n\n    /**\n     * Add place holders for forum module image attachments (note, regular files are covered by php).\n     * @param {array} forumFileMapping\n     * @returns {promise}\n     */\n    #placeHoldForumModule(forumFileMapping) {\n        const dfd = $.Deferred();\n        this.#placeHoldSelector('.forumpost .attachedimages img[src*=\"pluginfile.php\"], ' +\n            '.forumpost .body-content-container a[href*=\"pluginfile.php\"]', forumFileMapping)\n            .done(() => {\n                dfd.resolve();\n            });\n        return dfd.promise();\n    }\n\n    /**\n     * Add place holders for assign module additional files.\n     * @param {array} assignFileMapping\n     * @returns {promise}\n     */\n    #placeHoldAssignModule(assignFileMapping) {\n        const dfd = $.Deferred();\n        Util.whenTrue(() => {\n            return $('div[id*=\"assign_files_tree\"] .ygtvitem').length > 0;\n        }, 10)\n            .done(() => {\n                this.#placeHoldSelector('div[id*=\"assign_files_tree\"] a[href*=\"pluginfile.php\"]', assignFileMapping);\n                dfd.resolve();\n            });\n        return dfd.promise();\n    }\n\n    /**\n     * Add place holders for folder module files.\n     * @param {array} folderFileMapping\n     * @returns {promise}\n     */\n    #placeHoldFolderModule(folderFileMapping) {\n        const dfd = $.Deferred();\n        Util.whenTrue(() => {\n            return $('.foldertree > .filemanager .ygtvitem').length > 0;\n        }, 10)\n            .done(() => {\n                const unwrappedlinks = '.foldertree > .filemanager span:not(.filter-ally-wrapper) > a[href*=\"pluginfile.php\"]';\n                this.#placeHoldSelector(unwrappedlinks, folderFileMapping)\n                    .done(() => {\n                        dfd.resolve();\n                    });\n            });\n        return dfd.promise();\n    }\n\n    /**\n     * Add place holders for glossary module files.\n     * @param {array} glossaryFileMapping\n     * @returns {promise}\n     */\n    #placeHoldGlossaryModule(glossaryFileMapping) {\n        const dfd = $.Deferred();\n\n        // Glossary attachment markup is terrible!\n        // The first thing we need to do is rewrite the glossary attachments so that they are encapsulated.\n        $('.entry .attachments > br').each((idx, el) => {\n            const mainAnchor = $(el).prev('a[href*=\"pluginfile.php\"]');\n            mainAnchor.addClass('ally-glossary-attachment');\n            const iconAnchor = $(mainAnchor).prev('a[href*=\"pluginfile.php\"]');\n            $(el).after('<div class=\"ally-glossary-attachment-row\"></div>');\n            const container = $(el).next('.ally-glossary-attachment-row');\n            container.append(iconAnchor);\n            container.append(mainAnchor);\n            $(el).remove();\n        });\n\n        const unwrappedlinks = '.entry .attachments .ally-glossary-attachment';\n        this.#placeHoldSelector(unwrappedlinks, glossaryFileMapping)\n            .done(() => {\n                dfd.resolve();\n            });\n        return dfd.promise();\n    }\n\n    /**\n     * Encode a file path so that it can be used to find things by uri.\n     * @param {string} filePath\n     * @returns {string}\n     */\n    urlEncodeFilePath(filePath) {\n        const parts = filePath.split('/');\n        for (let p in parts) {\n            parts[p] = encodeURIComponent(parts[p]);\n        }\n        const encoded = parts.join('/');\n        return encoded;\n    }\n\n    /**\n     * General function for finding lesson component file elements and then add mapping.\n     * @param {array} map\n     * @param {string} selectorPrefix\n     * @returns {Promise}\n     */\n    #placeHoldLessonGeneral(map, selectorPrefix) {\n        const dfd = $.Deferred();\n        if (map.length === 0) {\n            dfd.resolve();\n        } else {\n            for (let c in map) {\n                const path = this.urlEncodeFilePath(c);\n                const sel = selectorPrefix + 'img[src*=\"' + path + '\"], ' + selectorPrefix + 'a[href*=\"' + path + '\"]';\n                this.#placeHoldSelector(sel, map).done(() => {\n                    dfd.resolve();\n                });\n            }\n        }\n        return dfd.promise();\n    }\n\n    /**\n     * Placehold lesson page contents.\n     * @param {array} pageContentsMap\n     * @returns {Promise}\n     */\n    #placeHoldLessonPageContents(pageContentsMap) {\n        return this.#placeHoldLessonGeneral(pageContentsMap, '');\n    }\n\n    /**\n     * Placehold lesson answers.\n     * @param {array} pageAnswersMap\n     * @returns {Promise}\n     */\n    #placeHoldLessonAnswersContent(pageAnswersMap) {\n        return this.#placeHoldLessonGeneral(pageAnswersMap,\n            '.studentanswer table tr:nth-child(1) '); // Space at end of selector intended.\n    }\n\n    /**\n     * Placehold lesson responses.\n     * @param {array} pageResponsesMap\n     * @returns {Promise}\n     */\n    #placeHoldLessonResponsesContent(pageResponsesMap) {\n        return this.#placeHoldLessonGeneral(pageResponsesMap,\n            '.studentanswer table tr.lastrow '); // Space at end of selector intended.\n    }\n\n    /**\n     * Add place holders for lesson module files.\n     * @param {array} lessonFileMapping\n     * @returns {Promise}\n     */\n    async #placeHoldLessonModule(lessonFileMapping) {\n        const pageContentsMap = lessonFileMapping.page_contents;\n        const pageAnswersMap = lessonFileMapping.page_answers;\n        const pageResponsesMap = lessonFileMapping.page_responses;\n\n        await this.#placeHoldLessonPageContents(pageContentsMap);\n        await this.#placeHoldLessonAnswersContent(pageAnswersMap);\n        await this.#placeHoldLessonResponsesContent(pageResponsesMap);\n    }\n\n    /**\n     * Add place holders for resource module.\n     * @param {object} moduleFileMapping\n     * @returns {promise}\n     */\n    #placeHoldResourceModule(moduleFileMapping) {\n        const dfd = $.Deferred();\n        let c = 0;\n\n        /**\n         * Once all modules processed, resolve promise for this function.\n         */\n        const checkAllProcessed = () => {\n            c++;\n            // All resource modules have been dealt with.\n            if (c >= Object.keys(moduleFileMapping).length) {\n                dfd.resolve();\n            }\n        };\n        for (let moduleId in moduleFileMapping) {\n            const pathHash = moduleFileMapping[moduleId].content;\n            let moduleEl;\n            if ($('body').hasClass('theme-snap') && !$('body').hasClass('format-tiles')) {\n                moduleEl = $('#module-' + moduleId + ':not(.snap-native) .activityinstance ' +\n                    '.snap-asset-link a:first-of-type:not(.clickable-region)');\n            } else if ($('body').hasClass('format-tiles')) {\n                moduleEl = $('#module-' + moduleId + ' .activityinstance ' +\n                    'a:first-of-type:not(.clickable-region,.editing_move)');\n            } else {\n                moduleEl = $('#module-' + moduleId + ' .activity-instance ' +\n                    'a:first-of-type:not(.clickable-region,.editing_move)');\n            }\n            const processed = moduleEl.find('.filter-ally-wrapper');\n            if (processed.length > 0) {\n                checkAllProcessed(); // Already processed.\n                continue;\n            }\n            const data = {\n                isimage: false,\n                fileid: pathHash,\n                url: $(moduleEl).attr('href')\n            };\n            this.#renderTemplate(data, pathHash, moduleEl)\n                .done(checkAllProcessed);\n        }\n        return dfd.promise();\n    }\n\n    buildContentIdent(component, table, field, id) {\n        return [component, table, field, id].join(':');\n    }\n\n    /**\n     * Add annotations to sections content.\n     * @param {array} sectionMapping\n     * @returns {Promise}\n     */\n    #annotateSections(sectionMapping) {\n        const dfd = $.Deferred();\n\n        for (let s in sectionMapping) {\n            const sectionId = sectionMapping[s];\n            const ident = this.buildContentIdent('course', 'course_sections', 'summary', sectionId);\n\n            const selectors = [\n                '#' + s + ' > .content div[class*=\"summarytext\"] .no-overflow',\n                'body.theme-snap #' + s + ' > .content > .summary > div > .no-overflow' // Snap.\n            ];\n            $(selectors.join(',')).attr('data-ally-richcontent', ident);\n        }\n\n        dfd.resolve();\n        return dfd.promise();\n    }\n\n    /**\n     * Annotate module introductions.\n     * @param {array} introMapping\n     * @param {string} module\n     * @param {array} additionalSelectors\n     */\n    annotateModuleIntros(introMapping, module, additionalSelectors) {\n        for (let i in introMapping) {\n            const annotation = introMapping[i];\n            const selectors = [\n                'body.path-mod-' + module + '.cmid-' + i + ' #intro > .no-overflow',\n                // We need to be specific here for non course pages to skip this.\n                'li.activity.modtype_' + module + '#module-' + i + ' .description .no-overflow > .no-overflow',\n                'li.snap-activity.modtype_' + module + '#module-' + i + ' .contentafterlink > .no-overflow'\n            ];\n            if (additionalSelectors) {\n                for (let a in additionalSelectors) {\n                    selectors.push(additionalSelectors[a].replace('{{i}}', i));\n                }\n            }\n            $(selectors.join(',')).attr('data-ally-richcontent', annotation);\n        }\n    }\n\n    /**\n     * Add annotations to forums.\n     * @param {array} forumMapping\n     */\n    annotateForums(forumMapping) {\n        // Annotate introductions.\n        const intros = forumMapping.intros;\n        this.annotateModuleIntros(intros, 'forum');\n\n        // Annotate discussions.\n        const discussions = forumMapping.posts;\n        for (let d in discussions) {\n            const post = 'p' + d;\n            const annotation = discussions[d];\n            const selectors = [\n                \"#page-mod-forum-discuss #\" + post +\n                ' div.forumpost div.no-overflow'\n            ];\n            $(selectors.join(',')).attr('data-ally-richcontent', annotation);\n        }\n    }\n\n    /**\n     * Add annotations to Open Forums.\n     * @param {array} forumMapping\n     */\n    annotateMRForums(forumMapping) {\n\n        // Annotate introductions.\n        const intros = forumMapping.intros;\n        this.annotateModuleIntros(intros, 'hsuforum', ['#hsuforum-header .hsuforum_introduction > .no-overflow']);\n\n        const discussions = forumMapping.posts;\n        for (let d in discussions) {\n            const annotation = discussions[d];\n            const postSelector = 'article[id=\"p' + d + '\"] div.posting';\n            $(postSelector).attr('data-ally-richcontent', annotation);\n        }\n    }\n\n    /**\n     * Add annotations to glossary.\n     * @param {array} mapping\n     */\n    annotateGlossary(mapping) {\n        // Annotate introductions.\n        const intros = mapping.intros;\n        this.annotateModuleIntros(intros, 'glossary');\n\n        // Annotate entries.\n        const entries = mapping.entries;\n        for (let e in entries) {\n            const annotation = entries[e];\n            const entryFooter = $('.entrylowersection .commands a[href*=\"id=' + e + '\"]');\n            const entry = $(entryFooter).parents('.glossarypost').find('.entry .no-overflow');\n            $(entry).attr('data-ally-richcontent', annotation);\n        }\n    }\n\n    /**\n     * Add annotations to page.\n     * @param {array} mapping\n     */\n    annotatePage(mapping) {\n        const intros = mapping.intros;\n        this.annotateModuleIntros(intros, 'page', ['li.snap-native.modtype_page#module-{{i}} .contentafterlink > .summary-text']);\n\n        // Annotate content.\n        const content = mapping.content;\n        for (let c in content) {\n            const annotation = content[c];\n            const selectors = [\n                '#page-mod-page-view #region-main .box.generalbox > .no-overflow',\n                'li.snap-native.modtype_page#module-' + c + ' .pagemod-content'\n            ];\n            $(selectors.join(',')).attr('data-ally-richcontent', annotation);\n        }\n    }\n\n    /**\n     * Add annotations to book.\n     * @param {array} mapping\n     */\n    annotateBook(mapping) {\n        const intros = mapping.intros;\n\n        // For book, the only place the intro shows is on the course page when you select \"display description on course page\"\n        // in the module settings.\n        this.annotateModuleIntros(intros, 'book',\n            ['li.snap-native.modtype_book#module-{{i}} .contentafterlink > .summary-text .no-overflow']);\n\n        // Annotate content.\n        const content = mapping.chapters;\n        let chapterId;\n\n        if (this.#params.chapterid) {\n            chapterId = this.#params.chapterid;\n        } else {\n            const urlParams = new URLSearchParams(window.location.search);\n            chapterId = urlParams.get('chapterid');\n        }\n\n        $.each(content, (ch, annotation) => {\n            if (chapterId != ch) {\n                return;\n            }\n            const selectors = [\n                '#page-mod-book-view #region-main .box.generalbox.book_content > .no-overflow',\n                'li.snap-native.modtype_page#module-' + ch + ' .pagemod-content'\n            ];\n            $(selectors.join(',')).attr('data-ally-richcontent', annotation);\n        });\n    }\n\n    /**\n     * Add annotations to lesson.\n     * @param {array} mapping\n     */\n    async annotateLesson(mapping) {\n        const intros = mapping.intros;\n\n        // For lesson, the only place the intro shows is on the course page when you select \"display description on course page\"\n        // in the module settings.\n        this.annotateModuleIntros(intros, 'lesson',\n            ['li.snap-native.modtype_lesson#module-{{i}} .contentafterlink > .summary-text .no-overflow']);\n\n        // Annotate content.\n        const content = mapping.lesson_pages;\n        let pageId;\n        for (let p in content) {\n            if (document.body.id === \"page-mod-lesson-edit\") {\n                const xpath = '//a[@id=\"lesson-' + p + '\"]//ancestor::table//tbody/tr/td/div[contains(@class, \"no-overflow\")]';\n                const annotation = content[p];\n                const node = this.#getNodeByXpath(xpath);\n                $(node).attr('data-ally-richcontent', annotation);\n            } else {\n                // Try get page from form.\n                const node = this.#getNodeByXpath('//form[contains(@action, \"continue.php\")]//input[@name=\"pageid\"]');\n                if (node) {\n                    pageId = $(node).val();\n                } else {\n                    const urlParams = new URLSearchParams(window.location.search);\n                    pageId = urlParams.get('pageid');\n                }\n\n                if (pageId != p) {\n                    continue;\n                }\n                const annotation = content[p];\n                const selectors = [\n                    // Regular page.\n                    '#page-mod-lesson-view #region-main .box.contents > .no-overflow',\n                    // Question page.\n                    '#page-mod-lesson-view #region-main form > fieldset > .fcontainer > .contents .no-overflow',\n                    // Lesson page.\n                    'li.snap-native.modtype_page#module-' + p + ' .pagemod-content'\n                ];\n\n                $(selectors.join(',')).attr('data-ally-richcontent', annotation);\n            }\n        }\n\n        // Annotate answer answers.\n        const strings = await getStrings([\n            {key: 'answer', component: 'mod_lesson'},\n            {key: 'response', component: 'mod_lesson'}\n        ]);\n\n        const answerLabel = strings[0];\n        const responseLabel = strings[1];\n        const answers = mapping.lesson_answers;\n\n        const processAnswerResponse = (pageId, i, label, annotation) => {\n            const xpath = '//a[@id=\"lesson-' + pageId + '\"]//ancestor::table' +\n                '//td/label[contains(text(),\"' + label + ' ' + i + '\")]/ancestor::tr/td[2]';\n            const nodes = this.#getNodesByXpath(xpath);\n            for (let n in nodes) {\n                const node = nodes[n];\n                $(node).attr('data-ally-richcontent', annotation);\n            }\n        };\n\n        for (let a in answers) {\n            // Increment anum so that we can get the answer number.\n            // Note, we can trust that this is correct because you can't order answers and the code in the lesson component\n            // orders answers by id.\n            const annotation = answers[a];\n\n            const tmpArr = a.split('_');\n            const pageId = tmpArr[0];\n            const ansId = tmpArr[1];\n            const anum = tmpArr[2];\n\n            // Process answers when on lesson edit page.\n            if (document.body.id === \"page-mod-lesson-edit\") {\n                processAnswerResponse(pageId, anum, answerLabel, annotation);\n            } else {\n                // Wrap answers in labels.\n                $('#page-mod-lesson-view label[for=\"id_answerid_' + ansId + '\"]').attr('data-ally-richcontent', annotation);\n\n                if (this.#params.answerid && this.#params.answerid == ansId) {\n                    $('.studentanswer tr:nth-of-type(1) > td div').attr('data-ally-richcontent', annotation);\n                } else {\n                    const answerWrapperId = 'answer_wrapper_' + ansId;\n                    const answerEl = $('#id_answerid_' + ansId);\n                    if (answerEl.data('annotated') != 1) {\n                        // We only want to wrap this once.\n                        const contentEls = answerEl.nextAll();\n                        answerEl.parent('label').append('<span id=\"answer_wrapper_' + ansId + '\"></span>');\n                        $('#' + answerWrapperId).append(contentEls);\n                    }\n                    answerEl.data('annotated', 1);\n                }\n                $('#answer_wrapper_' + a).attr('data-ally-richcontent', annotation);\n            }\n        }\n\n        // Annotate answer responses.\n        const responses = mapping.lesson_answers_response;\n        for (let r in responses) {\n            const annotation = responses[r];\n\n            const tmpArr = r.split('_');\n            const pageId = tmpArr[0];\n            const respId = tmpArr[1];\n            const rnum = tmpArr[2];\n\n            if (document.body.id === \"page-mod-lesson-edit\") {\n                processAnswerResponse(pageId, rnum, responseLabel, annotation);\n            } else if (this.#params.answerid && this.#params.answerid == respId) {\n                // Just incase you are wondering, yes answer ids ^ are the same as response ids ;-).\n                const responseWrapperId = 'response_wrapper_' + respId;\n                if (!$('.studentanswer tr.lastrow > td #' + responseWrapperId).length) {\n                    // We only want to wrap this once, hence above ! length check.\n                    const contentEls = $('.studentanswer tr.lastrow > td > br').nextAll();\n                    $('.studentanswer tr.lastrow > td > br').after('<span id=\"' + responseWrapperId + '\"></span>');\n                    $('#' + responseWrapperId).append(contentEls);\n                }\n\n                $('#' + responseWrapperId).attr('data-ally-richcontent', annotation);\n            }\n        }\n    }\n\n    /**\n     * Annotate supported modules\n     * @param {array} moduleMapping\n     * @returns {Promise}\n     */\n    #annotateModules(moduleMapping) {\n        const dfd = $.Deferred();\n        if (moduleMapping.mod_forum !== undefined) {\n            this.annotateForums(moduleMapping.mod_forum);\n        }\n        if (moduleMapping.mod_hsuforum !== undefined) {\n            this.annotateMRForums(moduleMapping.mod_hsuforum);\n        }\n        if (moduleMapping.mod_glossary !== undefined) {\n            this.annotateGlossary(moduleMapping.mod_glossary);\n        }\n        if (moduleMapping.mod_page !== undefined) {\n            this.annotatePage(moduleMapping.mod_page);\n        }\n        if (moduleMapping.mod_book !== undefined) {\n            this.annotateBook(moduleMapping.mod_book);\n        }\n        if (moduleMapping.mod_lesson !== undefined) {\n            this.annotateLesson(moduleMapping.mod_lesson);\n        }\n        dfd.resolve();\n        return dfd.promise();\n    }\n\n    /**\n     * Annotates course summary if found on footer.\n     * @param {object} mapping\n     * @returns {Promise}\n     */\n    #annotateSnapCourseSummary(mapping) {\n        const dfd = $.Deferred();\n        const snapFooterCourseSummary = $('#snap-course-footer-summary > div.no-overflow');\n        if (snapFooterCourseSummary.length) {\n            const ident = this.buildContentIdent('course', 'course', 'summary', mapping.courseId);\n            snapFooterCourseSummary.attr('data-ally-richcontent', ident);\n        }\n        dfd.resolve();\n        return dfd.promise();\n    }\n\n    /**\n     * Annotate html block.\n     * @param {object} mapping\n     * @returns {Promise}\n     */\n    #annotateHtmlBlock(mapping) {\n        const dfd = $.Deferred();\n\n        const items = mapping.block_html;\n        for (let i in items) {\n            const ident = items[i];\n            const selectors = [\n                '#inst' + i + '.block_html > .card-body > .card-text > .no-overflow',\n                '#inst' + i + '.block_html > .content > .no-overflow'\n            ];\n            const selector = selectors.join(',');\n            $(selector).attr('data-ally-richcontent', ident);\n        }\n        dfd.resolve();\n        return dfd.promise();\n    }\n\n    /**\n     * Apply place holders and add annotations to content.\n     * @returns {promise}\n     */\n    applyPlaceHolders() {\n        M.util.js_pending('filter_ally_applyPlaceHolders');\n        const dfd = $.Deferred();\n\n        if (ally_module_maps === undefined || ally_section_maps === undefined) {\n            dfd.resolve();\n            return dfd.promise();\n        }\n\n        const self = this;\n\n        const tasks = [\n            {\n                mapVar: ally_module_maps.file_resources,\n                method: this.#placeHoldResourceModule\n            },\n            {\n                mapVar: ally_module_maps.assignment_files,\n                method: this.#placeHoldAssignModule\n            },\n            {\n                mapVar: ally_module_maps.folder_files,\n                method: this.#placeHoldFolderModule\n            },\n            {\n                mapVar: ally_module_maps.forum_files,\n                method: this.#placeHoldForumModule\n            },\n            {\n                mapVar: ally_module_maps.glossary_files,\n                method: this.#placeHoldGlossaryModule\n            },\n            {\n                mapVar: ally_module_maps.lesson_files,\n                method: this.#placeHoldLessonModule\n            },\n            {\n                mapVar: ally_section_maps,\n                method: this.#annotateSections\n            },\n            {\n                mapVar: ally_annotation_maps,\n                method: this.#annotateModules\n            },\n            {\n                mapVar: {courseId: this.#courseId},\n                method: this.#annotateSnapCourseSummary\n            },\n            {\n                mapVar: ally_annotation_maps,\n                method: this.#annotateHtmlBlock\n            }];\n\n        $(document).ready(() => {\n            let completed = 0;\n\n            /**\n             * Run this once a task has resolved.\n             */\n            const onTaskComplete = () => {\n                completed++;\n                if (completed === tasks.length) {\n                    // All tasks completed.\n                    M.util.js_complete('filter_ally_applyPlaceHolders');\n                    dfd.resolve();\n                }\n            };\n\n            for (let t in tasks) {\n                const task = tasks[t];\n                if (Object.keys(task.mapVar).length > 0) {\n                    task.method.call(self, task.mapVar)\n                        .done(onTaskComplete);\n                } else {\n                    // Skipped this task because mappings are empty.\n                    onTaskComplete();\n                }\n            }\n        });\n        return dfd.promise();\n    }\n\n    /**\n     * Initialise JS stage two.\n     * @param {string} jwt\n     * @param {object} config\n     */\n    initStageTwo(jwt, config) {\n        if (this.#canViewFeedback || this.#canDownload) {\n            const debounceApplyPlaceHolders = Util.debounce(() => {\n                return this.applyPlaceHolders();\n            }, 1000);\n            debounceApplyPlaceHolders()\n                .done(() => {\n                    ImageCover.init();\n                    Ally.init(jwt, config);\n                    try {\n                        const selector = $('.foldertree > .filemanager');\n                        const targetNode = selector[0];\n                        if (targetNode) {\n                            const observerConfig = {attributes: true, childList: true, subtree: true};\n                            const callback = (mutationsList) => {\n                                mutationsList.filter((mutation) => {\n                                    return mutation.type === 'childList';\n                                }).forEach(() => {\n                                    this.#placeHoldFolderModule(ally_module_maps.folder_files);\n                                });\n                            };\n                            const observer = new MutationObserver(callback);\n                            observer.observe(targetNode, observerConfig);\n                        }\n                    } catch (error) {\n                        setInterval(() => {\n                            this.#placeHoldFolderModule(ally_module_maps.folder_files);\n                        }, 5000);\n                    }\n                    this.#initialised = true;\n                });\n\n            $(document).ajaxComplete(() => {\n                if (!this.#initialised) {\n                    return;\n                }\n                debounceApplyPlaceHolders();\n            });\n            // For Snap theme.\n            if ($('body.theme-snap').length) {\n                $(document).ajaxComplete((event, xhr, settings) => {\n                    // Search ally server response.\n                    if (settings.url.includes('ally.js')) {\n                        setTimeout(() => {\n                            // Show score icons that are hidden, see INT-18688.\n                            $('.ally-feedback.ally-active.ally-score-indicator-embedded span').each((idx, el) => {\n                                if (el.style.display == 'none') {\n                                    el.style.display = 'block';\n                                    if (el.getAttribute('class') == 'ally-scoreindicator-container') {\n                                        el.style.display = 'inline-block';\n                                        el.children[0].style.display = 'inline-block';\n                                    }\n                                }\n                            });\n                        }, 5000);\n                        $(document).off('ajaxComplete');\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Init function.\n     * @param {string} jwt\n     * @param {object} config\n     * @param {boolean} canViewFeedback\n     * @param {boolean} canDownload\n     * @param {int} courseId\n     * @param {object} params\n     */\n    init(jwt, config, canViewFeedback, canDownload, courseId, params) {\n\n        this.#canViewFeedback = canViewFeedback;\n        this.#canDownload = canDownload;\n        this.#courseId = courseId;\n        this.#params = params;\n\n        const self = this;\n\n        const pluginJSURL = (path) => {\n            return M.cfg.wwwroot + \"/pluginfile.php/\" + M.cfg.contextid + \"/filter_ally/\" + path;\n        };\n\n        const polyfills = {};\n        if (!document.evaluate) {\n            polyfills['filter_ally/wgxpath'] = pluginJSURL(\"vendorjs/wgxpath.install\");\n        }\n        if (typeof URLSearchParams === 'undefined') {\n            polyfills['filter_ally/urlsearchparams'] = [\n                'https://cdnjs.cloudflare.com/ajax/libs/url-search-params/1.1.0/url-search-params.amd.js',\n                pluginJSURL('vendorjs/url-search-params.amd') // CDN fallback.\n            ];\n        }\n        if (polyfills !== {}) {\n            // Polyfill document.evaluate.\n            require.config(\n                {\n                    enforceDefine: false,\n                    paths: polyfills\n                }\n            );\n            const requires = Object.keys(polyfills);\n\n            require(requires, () => {\n                if (typeof URLSearchParams === 'undefined') {\n                    window.URLSearchParams = arguments[1]; // Second arg in require (which is URLSearchParams).\n                }\n                self.initStageTwo(jwt, config);\n            });\n\n            return;\n        }\n        self.initStageTwo(jwt, config);\n    }\n}\n\nexport default new Main();\n"],"names":["xpath","result","window","document","createExpression","evaluate","XPathResult","ANY_TYPE","nodes","node","iterateNext","push","FIRST_ORDERED_NODE_TYPE","singleNodeValue","data","pathHash","targetEl","dfd","$","Deferred","parents","length","resolve","promise","canviewfeedback","this","candownload","html","render","done","next","find","after","remove","selector","map","c","each","idx","el","checkComplete","url","type","regex","prop","toLowerCase","attr","indexOf","match","path","decodeURIComponent","undefined","query","Util","getQuery","file","isimage","fileid","forumFileMapping","assignFileMapping","whenTrue","folderFileMapping","glossaryFileMapping","mainAnchor","prev","addClass","iconAnchor","container","append","selectorPrefix","urlEncodeFilePath","sel","pageContentsMap","pageAnswersMap","pageResponsesMap","lessonFileMapping","page_contents","page_answers","page_responses","moduleFileMapping","checkAllProcessed","Object","keys","moduleId","content","moduleEl","hasClass","sectionMapping","s","sectionId","ident","buildContentIdent","selectors","join","moduleMapping","mod_forum","annotateForums","mod_hsuforum","annotateMRForums","mod_glossary","annotateGlossary","mod_page","annotatePage","mod_book","annotateBook","mod_lesson","annotateLesson","mapping","snapFooterCourseSummary","courseId","items","block_html","i","filePath","parts","split","p","encodeURIComponent","component","table","field","id","annotateModuleIntros","introMapping","module","additionalSelectors","annotation","a","replace","forumMapping","intros","discussions","posts","d","post","postSelector","entries","e","entryFooter","entry","chapters","chapterId","_classPrivateFieldGet","chapterid","urlParams","URLSearchParams","location","search","get","ch","lesson_pages","pageId","body","val","strings","key","answerLabel","responseLabel","answers","lesson_answers","processAnswerResponse","label","n","tmpArr","ansId","anum","answerid","answerWrapperId","answerEl","contentEls","nextAll","parent","responses","lesson_answers_response","r","respId","rnum","responseWrapperId","applyPlaceHolders","M","util","js_pending","ally_module_maps","ally_section_maps","self","tasks","mapVar","file_resources","method","assignment_files","folder_files","forum_files","glossary_files","lesson_files","ally_annotation_maps","ready","completed","onTaskComplete","js_complete","t","task","call","initStageTwo","jwt","config","debounceApplyPlaceHolders","debounce","init","targetNode","observerConfig","attributes","childList","subtree","MutationObserver","mutationsList","filter","mutation","forEach","observe","error","setInterval","ajaxComplete","event","xhr","settings","includes","setTimeout","style","display","getAttribute","children","off","canViewFeedback","canDownload","params","pluginJSURL","cfg","wwwroot","contextid","polyfills","require","enforceDefine","paths","requires","arguments"],"mappings":"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"}